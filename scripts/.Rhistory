summarise(number_of_injuries = sum(num_injured)) %>%
arrange(-number_of_injuries) %>% rename(state = Test)
View(summary_table)
colnames(summary_table) <- c("State", "Number of Injuries")
styler:::style_active_file()
lintr::lint("analysis.R")
library(dplyr)
library(plotly)
# Summary Information -----------------------------------------------------
shootings_2018 <- read.csv("data/shootings-2018.csv")
num_shootings <- nrow(shootings_2018)
num_deaths <- sum(shootings_2018$num_killed)
cities <- shootings_2018 %>%
filter(num_injured > 10) %>%
select(city)
city_most_killed <- shootings_2018 %>%
filter(max(num_killed) == num_killed) %>%
select(city)
# Summary Table -----------------------------------------------------------
summary_table <- shootings_2018 %>%
group_by(state) %>%
summarise(number_of_injuries = sum(num_injured)) %>%
arrange(-number_of_injuries)
colnames(summary_table) <- c("State", "Number of Injuries")
# Description of a Particular Incident ------------------------------------
incident <- shootings_2018 %>%
filter(max(num_killed) == num_killed)
# Interactive Map ---------------------------------------------------------
# Found how to set a range of sizes from link below
# https://stackoverflow.com/questions/39859647/set-marker-size-in-plotly?utm_medium=organic&utm_source=google_rich_qa&utm_campaign=google_rich_qa
# Also found how to make the interactive map from the link below
# https://plot.ly/r/scatter-plots-on-maps/#style-scatter-map-layout
interactive_map <- plot_geo(shootings_2018,
lat = shootings_2018$lat,
lon = shootings_2018$lng
) %>%
add_markers(
text = paste(paste("State:", shootings_2018$state),
paste("Injuries:", shootings_2018$num_injured),
paste("Deaths:", shootings_2018$num_killed),
sep = "<br />"
),
size = shootings_2018$num_injured,
sizes = c(10, 400)
) %>%
layout(title = "Shootings in 2018", geo = list(scope = "usa"))
# Additional Plot ---------------------------------------------------------
state_num_shootings <- shootings_2018 %>%
group_by(state) %>%
summarise("Shootings" = n())
additional_plot <- plot_ly(
x = state_num_shootings$Shootings,
y = state_num_shootings$state,
type = "bar", orientation = "h"
) %>%
layout(margin = list(l = 160, r = 0))
library(dplyr)
library(plotly)
# Summary Information -----------------------------------------------------
shootings_2018 <- read.csv("data/shootings-2018.csv")
num_shootings <- nrow(shootings_2018)
num_deaths <- sum(shootings_2018$num_killed)
cities <- shootings_2018 %>%
filter(num_injured > 10) %>%
select(city)
city_most_killed <- shootings_2018 %>%
filter(max(num_killed) == num_killed) %>%
select(city)
# Summary Table -----------------------------------------------------------
summary_table <- shootings_2018 %>%
group_by(state) %>%
summarise(number_of_injuries = sum(num_injured)) %>%
arrange(-number_of_injuries)
colnames(summary_table) <- c("State", "Number of Injuries")
# Description of a Particular Incident ------------------------------------
incident <- shootings_2018 %>%
filter(max(num_killed) == num_killed)
# Interactive Map ---------------------------------------------------------
# Found how to set a range of sizes from link below
# https://stackoverflow.com/questions/39859647/set-marker-size-in-plotly?utm_medium=organic&utm_source=google_rich_qa&utm_campaign=google_rich_qa
# Also found how to make the interactive map from the link below
# https://plot.ly/r/scatter-plots-on-maps/#style-scatter-map-layout
interactive_map <- plot_geo(shootings_2018,
lat = shootings_2018$lat,
lon = shootings_2018$lng
) %>%
add_markers(
text = paste(paste("State:", shootings_2018$state),
paste("Injuries:", shootings_2018$num_injured),
paste("Deaths:", shootings_2018$num_killed),
sep = "<br />"
),
size = shootings_2018$num_injured,
sizes = c(10, 400)
) %>%
layout(title = "Shootings in 2018", geo = list(scope = "usa"))
# Additional Plot ---------------------------------------------------------
state_num_shootings <- shootings_2018 %>%
group_by(state) %>%
summarise("Shootings" = n())
additional_plot <- plot_ly(
x = state_num_shootings$Shootings,
y = state_num_shootings$state,
type = "bar", orientation = "h"
) %>%
layout(margin = list(l = 160, r = 0))
View(summary_table)
View(additional_plot)
View(cities)
View(city_most_killed)
View(incident)
View(interactive_map)
View(shootings_2018)
View(state_num_shootings)
temperatures <- read.csv("data/data-society-global-climate-change-data/GlobalLandTemperatureByCountry.csv")
setwd("C:/Users/Alan/Desktop/INFO_201/Final_Project/Info-201-BA3")
temperatures <- read.csv("data/data-society-global-climate-change-data/GlobalLandTemperatureByCountry.csv")
temperatures <- read.csv("data\data-society-global-climate-change-data/GlobalLandTemperaturesByCountry.csv")
temperatures <- read.csv("data/data-society-global-climate-change-data/GlobalLandTemperaturesByCountry.csv")
View(temperatures)
temperatures <- read.csv("data/data-society-global-climate-change-data/GlobalLandTemperaturesByState.csv")
View(temperatures)
library(dplyr)
library(plotly)
View(temperatures)
temperatures_by_country <- temperatures %>%
group_by(Country) %>%
group_by(dt)
temperatures_by_country <- temperatures %>%
group_by(Country) %>%
group_by(dt) %>%
select(dt)
View(temperatures_by_country)
temperatures_by_country <- temperatures %>%
group_by(Country) %>%
group_by(dt) %>%
summarise(dt = dt, avgTemp = mean(AverageTemperature)) %>%
select(dt, avgTemp)
temperatures_by_country <- temperatures %>%
group_by(Country) %>%
group_by(dt) %>%
summarise(avgTemp = mean(AverageTemperature)) %>%
select(avgTemp)
View(temperatures_by_country)
temperatures_by_country <- temperatures %>%
group_by(Country) %>%
group_by(dt) %>%
summarise(avgTemp = mean(AverageTemperature)) %>%
select(avgTemp, dt, Country)
temperatures_by_country <- temperatures %>%
group_by(Country) %>%
group_by(dt) %>%
summarise(avgTemp = mean(AverageTemperature)) %>%
select(avgTemp, dt, Country)
temperatures_by_country <- temperatures %>%
group_by(Country) %>%
group_by(dt) %>%
summarise(avgTemp = mean(AverageTemperature)) %>%
select(avgTemp, dt)
View(temperatures_by_country)
temperatures_by_country <- temperatures %>%
group_by(Country) %>%
select(dt, AverageTemperature, Country) %>%
group_by(dt) %>%
summarise(avgTemp = mean(AverageTemperature)) %>%
select(avgTemp, dt)
temperatures_by_country <- temperatures %>%
group_by(Country) %>%
select(dt, AverageTemperature, Country) %>%
group_by(dt) %>%
summarise(avgTemp = mean(AverageTemperature)) %>%
select(avgTemp, dt, Country)
temperatures_by_country <- temperatures %>%
group_by(Country) %>%
select(dt, AverageTemperature, Country) %>%
group_by(dt) %>%
summarise(avgTemp = mean(AverageTemperature), Country = Country) %>%
select(avgTemp, dt, Country)
temperatures_by_country <- temperatures %>%
group_by(Country) %>%
select(dt, AverageTemperature, Country) %>%
group_by(dt) %>%
summarise(avgTemp = mean(AverageTemperature), Country = first(Country)) %>%
select(avgTemp, dt, Country)
temperatures_by_country <- temperatures %>%
group_by(Country) %>%
# select(dt, AverageTemperature, Country) %>%
group_by(dt) %>%
summarise(avgTemp = mean(AverageTemperature), Country = first(Country)) %>%
select(avgTemp, dt, Country)
View(temperatures_by_country)
temperatures_by_country <- temperatures %>%
group_by(Country) %>%
select(dt, AverageTemperature, Country)
View(temperatures_by_country)
temperatures <- read.csv("data/data-society-global-climate-change-data/GlobalLandTemperaturesByCountry.csv")
View(temperatures)
temperatures <- read.csv("data/data-society-global-climate-change-data/GlobalLandTemperaturesByCountry.csv")
plot_geo(temperatures)
?plot_geo
plot_geo(temperatures) %>%
add_trace(
locations = ~Country,
color = ~total.exports, colors = 'Purples'
)
plot_geo(temperatures) %>%
add_trace(
locations = ~Country,
)
View(temperatures)
plot_geo(temperatures) %>%
add_trace(
locations = ~Country)
plot_geo(temperatures) %>%
add_trace(
locations = ~Country, color = ~Country)
locations = ~Country, color = ~Country) %>%
geo = list(
locations = ~Country, color = ~Country) %>%
geo = list(
plot_geo(temperatures) %>%
add_trace(
locations = ~Country, color = ~Country) %>%
geo = list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
plot_geo(temperatures) %>%
add_trace(
locations = ~Country, color = ~Country) %>%
geo = list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
plot_geo(temperatures) %>%
add_trace(
locations = ~Country, color = ~Country) %>%
geo = list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
locations = ~Country, color = ~Country) %>%
geo = list(
plot_geo(temperatures) %>%
add_trace(
locations = ~Country, color = ~Country) %>%
geo = list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
locations = ~Country, color = ~Country) %>%
layout(geo = list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
plot_geo(temperatures) %>%
add_trace(
locations = ~Country, color = ~Country) %>%
layout(geo = list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
)
library(ggplot2)
ggplot() +
geom_map(data = map_data("world"), map = map_data("world"))
View(temperatures)
plot_geo(temperatures) %>%
add_trace(
z = ~AverageTemperature %>%
locations = ~Country, color = ~Country) %>%
layout(geo = list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
)
plot_geo(temperatures) %>%
add_trace(
z = ~AverageTemperature %>%
locations = ~Country, color = ~Country) %>%
layout(geo = list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
)
plot_geo(temperatures) %>%
add_trace(
z = ~AverageTemperature,
locations = ~Country, color = ~Country) %>%
layout(geo = list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
)
plot_geo(temperatures) %>%
add_trace(
z = ~AverageTemperature,
locations = c("USA", "AFG"), color = ~Country) %>%
layout(geo = list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
)
plot_geo(temperatures) %>%
add_trace(
z = ~AverageTemperature,
locations = c("USA", "AFG"), color = ~AverageTemperature, colors= "Blues") %>%
layout(geo = list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
)
plot_geo(temperatures) %>%
add_trace(
z = ~AverageTemperature,
locations = c("USA"), color = ~AverageTemperature, colors= "Blues") %>%
layout(geo = list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
)
plot_geo(temperatures) %>%
add_trace(
z = ~AverageTemperature,
locations = c("USA"), color = ~AverageTemperature, colors= "Blues") %>%
layout(geo = list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
)
plot_geo(temperatures) %>%
add_trace(
z = c(1,200),
locations = c("USA", "CAN"), color = ~AverageTemperature, colors= "Blues") %>%
layout(geo = list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
)
plot_geo(temperatures) %>%
add_trace(
z = c(1),
locations = c("USA"), color = ~AverageTemperature, colors= "Blues") %>%
layout(geo = list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
)
View(temperatures)
temp_test <- temperatures %>%
filter(dt = 1772-11-01)
temp_test <- temperatures %>%
filter(dt == 1772-11-01)
View(temp_test)
temp_test <- temperatures %>%
filter(dt == "1772-11-01")
View(temp_test)
plot_geo(temp_test) %>%
add_trace(
z = c(1),
locations = c("USA"), color = ~AverageTemperature, colors= "Blues") %>%
layout(geo = list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
)
plot_geo() %>%
add_trace(
z = c(1, 20),
locations = c("USA", "CHN"), color = ~AverageTemperature, colors= "Blues") %>%
layout(geo = list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
)
plot_geo() %>%
add_trace(
z = c(1, 20),
locations = c("USA", "CHN"), color = ~c(1, 20), colors= "Blues") %>%
layout(geo = list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
)
plot_geo() %>%
add_trace(
z = c(1, 20),
locations = c("Italy", "CHN"), color = ~c(1, 20), colors= "Blues") %>%
layout(geo = list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
)
plot_geo() %>%
add_trace(
z = c(1, 20),
locations = c("United State", "CHN"), color = ~c(1, 20), colors= "Blues") %>%
layout(geo = list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
)
?countrycode
??countrycode
countrycode('Albania', 'country.name', 'iso3c')
plot_geo() %>%
add_trace(
z = c(1, 20),
locations = c("USA", "CHN"), color = ~c(1, 20), colors= "Blues") %>%
layout(geo = list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
)
substr("test",1,2)
library(dplyr)
library(plotly)
library(ggplot2)
library(countrycode)
temperatures_by_country <- read.csv("../data/data-society-global-climate-change-data/GlobalLandTemperaturesByCountry.csv")
temperatures_by_country$country_code <- countrycode(temperatures_by_country$Country, "country.name", "iso3c")
temperatures_by_country$year <- substr(temperatures_by_country$dt, 1, 4)
temp_test <- temperatures %>%
filter(dt == "1772-11-01")
plot_geo() %>%
add_trace(
z = temp_test$AverageTemperature,
locations = temp_test$country_code, color = ~temp_test$AverageTemperature, colors= "Blues") %>%
layout(geo = list(
showframe = FALSE,
projection = list(type = 'Mercator')
)
)
ggplot() +
geom_map(data = map_data("world"), map = map_data("world"))
temperatures_by_country <- read.csv("../data/data-society-global-climate-change-data/GlobalLandTemperaturesByCountry.csv")
temperatures_by_country$country_code <- countrycode(temperatures_by_country$Country, "country.name", "iso3c")
temperatures_by_country$year <- substr(temperatures_by_country$dt, 1, 4)
temp_test <- temperatures %>%
filter(dt == "1772-11-01")
plot_geo() %>%
add_trace(
z = temp_test$AverageTemperature,
locations = temp_test$country_code, color = ~temp_test$AverageTemperature, colors= "Blues") %>%
layout(geo = list(
showframe = FALSE,
projection = list(type = 'Mercator')
)
q
temperatures_by_country
temperatures_by_country <- read.csv("../data/data-society-global-climate-change-data/GlobalLandTemperaturesByCountry.csv")
setwd("C:/Users/Alan/Desktop/INFO_201/Final_Project/Info-201-BA3/scripts")
temperatures_by_country <- read.csv("../data/data-society-global-climate-change-data/GlobalLandTemperaturesByCountry.csv")
temperatures_by_country$country_code <- countrycode(temperatures_by_country$Country, "country.name", "iso3c")
temperatures_by_country$year <- substr(temperatures_by_country$dt, 1, 4)
View(temperatures_by_country)
temp_test <- temperatures_by_country %>%
filter(year == "1772")
View(temp_test)
c(1:10)
source(temperatures_by_country)
source(average_global_temp.R)
source("average_global_temp.R")
source("average_global_temp.R")
?sidebarPanel
shiny::runApp('C:/Users/Alan/Desktop/INFO_201/Final_Project/Info-201-BA3')
?sliderInput
runApp('C:/Users/Alan/Desktop/INFO_201/Final_Project/Info-201-BA3')
runApp('C:/Users/Alan/Desktop/INFO_201/Final_Project/Info-201-BA3')
source("average_global_temp.R")
global_temps <- temperatures_by_country %>%
filter(year == tab5_year) %>%
group_by(country_code) %>%
summarise(temps = mean(AverageTemperature))
global_temps <- temperatures_by_country %>%
filter(year == 1743) %>%
group_by(country_code) %>%
summarise(temps = mean(AverageTemperature))
View(global_temps)
global_temps <- temperatures_by_country %>%
filter(year == 2000) %>%
group_by(country_code) %>%
summarise(temps = mean(AverageTemperature))
View(global_temps)
global_temps <- temperatures_by_country %>%
filter(year == 2013) %>%
group_by(country_code) %>%
summarise(temps = mean(AverageTemperature))
View(global_temps)
runApp('C:/Users/Alan/Desktop/INFO_201/Final_Project/Info-201-BA3')
runApp('C:/Users/Alan/Desktop/INFO_201/Final_Project/Info-201-BA3')
