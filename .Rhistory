library(dplyr)
library(dplyr)
install.packages("dplyr")
library(dplyr)
df <- read.csv("data/emdat-disasters/Data.csv")
df <- read.csv("data/emdat-disasters/Data.csv")
View(df)
df_africa <- df %>%
filter(continent == "Africa")
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
ggplot(data = df_africa) +
geom_jitter(mapping = aes(
x = year, y = occurence
))
ggplot(data = df_africa) +
geom_jitter(mapping = aes(
x = year, y = occurrence
))
year_jitter <- function(data,y_choice,country){
df_choice <- df %>%
filter(continent == country)
ggplot(data = df_choice) +
geom_jitter(mapping = aes(
x = year, y = y_choice
))
}
year_jitter(df,Total.deaths,Africa)
year_jitter(df,Total.deaths,"Africa")
year_jitter(df,"Total.deaths"","Africa")
year_jitter(df,"Total.deaths","Africa")
year_jitter(df,"occurrence","Africa")
year_jitter(df,occurrence,"Africa")
year_jitter(df,"occurence",Africa)
year_jitter(df,"occurence","Africa")
install.packages("shiny")
# ui.R
library(shiny)
library(shinythemes)
library(dplyr)
library(ggplot2)
library(maps)
shinyUI(navbarPage(
theme = shinytheme("cerulean"),
"Temperature and Disasters",
# Create a tab panel for your map
tabPanel(
"Overview",
titlePanel(),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
# Input to select variable to map
selectInput(
)
)
),
# Main panel: display map
mainPanel(
tags$link(rel = "stylesheet", type = "text/css", href = "style.css"),
tags$h2(id = "main-heading", "")
# Maybe add an image
)
)
),
tabPanel(
"USA Heatmap",
titlePanel("Climate Change in the USA"),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
sliderInput("year","Pick A Year", min = 1750, max = 2013, value = 2012),
selectInput("unit", "Pick A Unit Of Temperature", choices = list(
"Farenheit", "Celsius"), selected = "Celsius")
),
mainPanel(
tags$link(rel = "stylesheet", type = "text/css", href = "style.css"),
tags$h2(id = "main-heading", "Temperature By Year"),
plotlyOutput("plot1"),
textOutput("disaster_text")
)
)
),
# Create a tabPanel to show your bar plot
tabPanel(
"Tab 2",
titlePanel(""),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
selectInput(
)
),
mainPanel(
tags$h2(id = "main-heading", ""),
plotOutput("plot2")
)
)
),
tabPanel(
"Tab 3",
titlePanel(""),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
selectInput(
)
),
mainPanel(
tags$h2(id = "main-heading", ""),
plotOutput("plot3")
)
)
),
tabPanel(
"Tab 4",
titlePanel(""),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
selectInput(
)
),
mainPanel(
tags$h2(id = "main-heading", ""),
plotOutput("plot4")
)
)
),
tabPanel(
"Tab 5",
titlePanel(""),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
selectInput(
)
),
mainPanel(
tags$h2(id = "main-heading", ""),
plotOutput("plot5")
)
)
)
)
# server.R
library(shiny)
library(shinythemes)
library(dplyr)
library(ggplot2)
library(maps)
library(plotly)
# Start shinyServer
shinyServer(function(input, output) {
# Plot for Tab 1
output$plot1 <- renderPlotly ({
# Get our temperature data
temp <- read.csv("data/data-society-global-climate-change-data/GlobalLandTemperaturesByState.csv",
stringsAsFactors = FALSE)
# Focus on the USA
temp <- temp %>% filter(Country == "United States")
# remove NAs
temp <- temp[complete.cases(temp),]
# Average the temp per year and state instead of monthly
temp$dt <- substr(temp$dt,1,4)
temp <- temp %>% group_by(dt, State) %>%
summarise(AverageTemperature = mean(AverageTemperature))
# Get map outlines
states <- map_data("state")
usa <- map_data("usa")
# In order to map our data we need to join it to our outline
# To do that we need to mfix some column names and Georgia
colnames(temp)[colnames(temp) == "State"] <- "region"
temp$region <- tolower(temp$region)
temp$region[temp$region == "georgia (state)"] <- "georgia"
joined <- full_join(states, temp, by = "region")
specific <- joined %>% filter(dt == input$year)
# Change unit of measurement
if (input$unit == "Fahrenheit"){
specific$AverageTemperature <- specific$AverageTemperature * 1.8 + 32
}
# Make the map
p <- ggplot(
data = usa,
mapping = aes(x = long, y = lat, group = group)
) +
geom_polygon(
fill = "darkorange3",
color = "black"
) +
coord_fixed(1.3) +
geom_polygon(data = states, fill = NA, color = "white") +
# Map our input
geom_polygon(
data = specific, aes(fill = AverageTemperature),
color = "white"
) + labs(fill = "Average Temperature",
x = "Longitude",
y = "Latitude") +
# Add input theme
scale_fill_gradient(low = "#f73131", high = "#f7e64a", space = "Lab",
na.value = "grey50", guide = "colourbar")
ggplotly(p)
})
#Tab 1 text output
output$disaster_text <- renderText ({
disaster_df <- read.csv("data/emdat-disasters/USA_disasters.csv")
disaster_df <- disaster_df %>%
filter(year == input$year) %>%
select(occurrence)
paste0("There were ", disaster_df[1,1], " natural disasters this year")
})
# Plot for Tab 2
output$plot2 <- renderPlot ({
})
# Plot for Tab 3
output$plot3 <- renderPlot ({
})
# Plot for Tab 4
output$plot4 <- renderPlot ({
})
# Plot for Tab 5
output$plot5 <- renderPlot ({
})
})
# ui.R
library(shiny)
library(shinythemes)
library(dplyr)
library(ggplot2)
library(maps)
shinyUI(navbarPage(
theme = shinytheme("cerulean"),
"Temperature and Disasters",
# Create a tab panel for your map
tabPanel(
"Overview",
titlePanel(),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
# Input to select variable to map
selectInput(
)
)
),
# Main panel: display map
mainPanel(
tags$link(rel = "stylesheet", type = "text/css", href = "style.css"),
tags$h2(id = "main-heading", "")
# Maybe add an image
)
)
),
tabPanel(
"USA Heatmap",
titlePanel("Climate Change in the USA"),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
sliderInput("year","Pick A Year", min = 1750, max = 2013, value = 2012),
selectInput("unit", "Pick A Unit Of Temperature", choices = list(
"Farenheit", "Celsius"), selected = "Celsius")
),
mainPanel(
tags$link(rel = "stylesheet", type = "text/css", href = "style.css"),
tags$h2(id = "main-heading", "Temperature By Year"),
plotlyOutput("plot1"),
textOutput("disaster_text")
)
)
),
# Create a tabPanel to show your bar plot
tabPanel(
"Tab 2",
titlePanel(""),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
selectInput(
)
),
mainPanel(
tags$h2(id = "main-heading", ""),
plotOutput("plot2")
)
)
),
tabPanel(
"Tab 3",
titlePanel(""),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
selectInput(
)
),
mainPanel(
tags$h2(id = "main-heading", ""),
plotOutput("plot3")
)
)
),
tabPanel(
"Tab 4",
titlePanel(""),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
selectInput(
)
),
mainPanel(
tags$h2(id = "main-heading", ""),
plotOutput("plot4")
)
)
),
tabPanel(
"Tab 5",
titlePanel(""),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
selectInput(
)
),
mainPanel(
tags$h2(id = "main-heading", ""),
plotOutput("plot5")
)
)
)
)
runApp()
install.packages("shinythemes")
runApp()
install.packages("maps")
runApp()
View(df)
temp <- read.csv("data/data-society-global-climate-change-data/AverageGlobalTempPerYear")
setwd("~/Desktop/Info201/Info-201-BA3")
temp <- read.csv("data/data-society-global-climate-change-data/AverageGlobalTempPerYear")
temp <- read.csv("data/data-society-global-climate-change-data/AverageGlobalTempPerYear.csv")
View(temp)
disa <- read.csv("data/emdat-disasters/Data.csv")
View(disa)
combined <- disa %>%
select(year,occurrence) %>%
mutate(year2 = temp$Year, temp = temp$Temp)
disa <- disa %>%
select(year,occurrence)
combined <- merge(temp,disa,by="Year")
names(disa)[1] <- "Year"
combined <- merge(temp,disa,by="Year")
View(combined)
disa <- read.csv("data/emdat-disasters/Data.csv")
disaster <- disa %>%
select(year,occurrence)
names(disaster)[1] <- "Year"
combined <- merge(temp,disaster,by="Year")
combined <- aggregate(. ~ Year + X + Temp, data = combined,sum)
disa <- read.csv("data/emdat-disasters/Data.csv")
disaster <- disa %>%
select(year,occurrence)
names(disaster)[1] <- "Year"
combined <- merge(temp,disaster,by="Year")
combined <- aggregate(. ~ Year + X + Temp, data = combined,sum)
p <- ggplot() +
geom_line(mapping = aes(x = combined$Temp, y = combined$occurrence))
p
runApp()
shiny::runApp()
install.packages("shinythemes")
runApp()
install.packages("maps")
runApp()
# ui.R
library(shiny)
library(shinythemes)
library(dplyr)
library(ggplot2)
library(maps)
shinyUI(navbarPage(
theme = shinytheme("cerulean"),
"Temperature and Disasters",
# Create a tab panel for your map
tabPanel(
"Overview",
titlePanel("test")
# Create sidebar layout
# Main panel: display map
# Maybe add an image
),
tabPanel(
"USA Heatmap",
titlePanel("Climate Change in the USA"),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
sliderInput("year","Pick A Year", min = 1750, max = 2013, value = 2012),
selectInput("unit", "Pick A Unit Of Temperature", choices = list(
"Farenheit", "Celsius"), selected = "Celsius")
),
mainPanel(
tags$link(rel = "stylesheet", type = "text/css", href = "style.css"),
tags$h2(id = "main-heading", "Temperature By Year"),
plotlyOutput("plot1"),
textOutput("disaster_text")
)
)
),
# Create a tabPanel to show your bar plot
tabPanel(
"Tab 2",
titlePanel(""),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
# selectInput(
#             )
),
mainPanel(
tags$h2(id = "main-heading", ""),
plotOutput("plot2")
)
)
),
tabPanel(
"Tab 3",
titlePanel(""),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
# selectInput(
# )
),
mainPanel(
tags$h2(id = "main-heading", ""),
plotOutput("plot3")
)
)
),
tabPanel(
"Tab 4",
titlePanel(""),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
# selectInput(
# )
),
mainPanel(
tags$h2(id = "main-heading", ""),
plotOutput("plot4")
)
)
),
tabPanel(
"Tab 5",
titlePanel(""),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
# selectInput(
# )
),
mainPanel(
tags$h2(id = "main-heading", ""),
plotOutput("plot5")
)
)
)
)
)
install.packages("plotly")
runApp()
install.packages("shiny")
install.packages("shiny")
shiny::runApp()
